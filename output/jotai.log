2022-09-04T17:34:15.270575-03:00[140631061484160]MainThread: self.args=Namespace(clean=False, no_log=False, inputdir=['/home/cissakind/Desktop/ex'], nproc=8, chunksize=-1, K=['big-arr'], optLevel=['O0'], logfile='./output/jotai.log', ubstats='./output/ubstats.txt')
2022-09-04T17:34:15.345913-03:00[140631061484160]MainThread: out='struct S | data int | flag char \nfunction sum void | s struct S | v int * | n int\n'
2022-09-04T17:34:15.375418-03:00[140631061484160]MainThread: out='function pack6bit void | buf int * | index int | inVal int\n'
2022-09-04T17:34:15.380377-03:00[140631061484160]MainThread: Running jotai with self.constraintsPath=PosixPath('/home/cissakind/Desktop/ex/presentation.d/constraint_big-arr'), self.descriptorPath=PosixPath('/home/cissakind/Desktop/ex/presentation.d/descriptor')
2022-09-04T17:34:15.386963-03:00[140631061484160]MainThread: out='/*RV_DELIM*/  int n = 4;\n  struct S s;\ns.data = ((-2 * (next_i()%2)) + 1) * next_i();\ns.flag = ((-2 * (next_i()%2)) + 1) * next_i();\n  int _len_v0 = 3;\n  int * v = (int *) malloc(_len_v0*sizeof(int));\n  for(int _i0 = 0; _i0 < _len_v0; _i0++) {\n    v[_i0] = ((-2 * (next_i()%2)) + 1) * next_i();\n  }\n  sum(s,v,n);\n  free(v);\n'
2022-09-04T17:34:15.388113-03:00[140631061484160]MainThread: Running jotai with self.constraintsPath=PosixPath('/home/cissakind/Desktop/ex/extr_anypixelfirmwarecontrollersrcLEDproto.c_pack6bit.d/constraint_big-arr'), self.descriptorPath=PosixPath('/home/cissakind/Desktop/ex/extr_anypixelfirmwarecontrollersrcLEDproto.c_pack6bit.d/descriptor')
2022-09-04T17:34:15.393623-03:00[140631061484160]MainThread: out='/*RV_DELIM*/  int index = 255;\n  int inVal = 255;\n  int _len_buf0 = 65025;\n  int * buf = (int *) malloc(_len_buf0*sizeof(int));\n  for(int _i0 = 0; _i0 < _len_buf0; _i0++) {\n    buf[_i0] = ((-2 * (next_i()%2)) + 1) * next_i();\n  }\n  pack6bit(buf,index,inVal);\n  free(buf);\n'
2022-09-04T17:34:16.527338-03:00[140631061484160]MainThread: err='=================================================================\n==1770877==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60200000001c at pc 0x0000004cf95c bp 0x7ffc45876af0 sp 0x7ffc45876ae8\nREAD of size 4 at 0x60200000001c thread T0\n    #0 0x4cf95b in sum /home/cissakind/Desktop/ex/presentation.d/presentation.c:54:9\n    #1 0x4d029a in main /home/cissakind/Desktop/ex/presentation.d/presentation.c:84:11\n    #2 0x7ff4c86ad082 in __libc_start_main /build/glibc-SzIz7B/glibc-2.31/csu/../csu/libc-start.c:308:16\n    #3 0x41c06d in _start (/home/cissakind/Desktop/ex/presentation.d/presentation_fsanitize_O0+0x41c06d)\n\n0x60200000001c is located 0 bytes to the right of 12-byte region [0x602000000010,0x60200000001c)\nallocated by thread T0 here:\n    #0 0x49c5e6 in malloc build/compiler-rt/lib/asan/asan_malloc_linux.cpp:145:3\n    #1 0x4cffb5 in main /home/cissakind/Desktop/ex/presentation.d/presentation.c:80:29\n    #2 0x7ff4c86ad082 in __libc_start_main /build/glibc-SzIz7B/glibc-2.31/csu/../csu/libc-start.c:308:16\n\nSUMMARY: AddressSanitizer: heap-buffer-overflow /home/cissakind/Desktop/ex/presentation.d/presentation.c:54:9 in sum\nShadow bytes around the buggy address:\n  0x0c047fff7fb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n=>0x0c047fff8000: fa fa 00[04]fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8010: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==1770877==ABORTING\n'
2022-09-04T17:34:16.528154-03:00[140631061484160]MainThread: Run: Fsanitize Complete failure
2022-09-04T17:34:16.846157-03:00[140631061484160]MainThread: out='0x401000:4:endbr64\n0x401004:4:sub $0x8,%rsp\n0x401008:7:mov 0x2fe9(%rip),%rax\n0x40100f:3:test %rax,%rax\n0x401012:2:je 0000000000401016 <_init+0x16>\n0x401014:2:callq *%rax\n0x401016:4:add $0x8,%rsp\n0x40101a:1:retq\n0x401020:6:pushq 0x2fe2(%rip)\n0x401026:6:jmpq *0x2fe4(%rip)\n0x40102c:4:nopl 0x0(%rax)\n0x401030:6:jmpq *0x2fe2(%rip)\n0x401036:5:pushq $0x0\n0x40103b:5:jmpq 0000000000401020 <.plt>\n0x401040:6:jmpq *0x2fda(%rip)\n0x401046:5:pushq $0x1\n0x40104b:5:jmpq 0000000000401020 <.plt>\n0x401050:6:jmpq *0x2fd2(%rip)\n0x401056:5:pushq $0x2\n0x40105b:5:jmpq 0000000000401020 <.plt>\n0x401060:6:jmpq *0x2fca(%rip)\n0x401066:5:pushq $0x3\n0x40106b:5:jmpq 0000000000401020 <.plt>\n0x401070:4:endbr64\n0x401074:2:xor %ebp,%ebp\n0x401076:3:mov %rdx,%r9\n0x401079:1:pop %rsi\n0x40107a:3:mov %rsp,%rdx\n0x40107d:4:and $0xfffffffffffffff0,%rsp\n0x401081:1:push %rax\n0x401082:1:push %rsp\n0x401083:7:mov $0x401450,%r8\n0x40108a:7:mov $0x4013e0,%rcx\n0x401091:7:mov $0x4012e0,%rdi\n0x401098:6:callq *0x2f52(%rip)\n0x40109e:1:hlt\n0x40109f:1:nop\n0x4010a0:4:endbr64\n0x4010a4:1:retq\n0x4010a5:10:nopw %cs:0x0(%rax,%rax,1)\n0x4010af:1:nop\n0x4010b0:5:mov $0x404048,%eax\n0x4010b5:6:cmp $0x404048,%rax\n0x4010bb:2:je 00000000004010d0 <deregister_tm_clones+0x20>\n0x4010bd:5:mov $0x0,%eax\n0x4010c2:3:test %rax,%rax\n0x4010c5:2:je 00000000004010d0 <deregister_tm_clones+0x20>\n0x4010c7:5:mov $0x404048,%edi\n0x4010cc:2:jmpq *%rax\n0x4010ce:2:xchg %ax,%ax\n0x4010d0:1:retq\n0x4010d1:11:data16 nopw %cs:0x0(%rax,%rax,1)\n0x4010dc:4:nopl 0x0(%rax)\n0x4010e0:5:mov $0x404048,%esi\n0x4010e5:7:sub $0x404048,%rsi\n0x4010ec:3:mov %rsi,%rax\n0x4010ef:4:shr $0x3f,%rsi\n0x4010f3:4:sar $0x3,%rax\n0x4010f7:3:add %rax,%rsi\n0x4010fa:3:sar %rsi\n0x4010fd:2:je 0000000000401110 <register_tm_clones+0x30>\n0x4010ff:5:mov $0x0,%eax\n0x401104:3:test %rax,%rax\n0x401107:2:je 0000000000401110 <register_tm_clones+0x30>\n0x401109:5:mov $0x404048,%edi\n0x40110e:2:jmpq *%rax\n0x401110:1:retq\n0x401111:11:data16 nopw %cs:0x0(%rax,%rax,1)\n0x40111c:4:nopl 0x0(%rax)\n0x401120:4:endbr64\n0x401124:7:cmpb $0x0,0x2f1d(%rip)\n0x40112b:2:jne 0000000000401140 <__do_global_dtors_aux+0x20>\n0x40112d:1:push %rbp\n0x40112e:3:mov %rsp,%rbp\n0x401131:5:callq 00000000004010b0 <deregister_tm_clones>\n0x401136:7:movb $0x1,0x2f0b(%rip)\n0x40113d:1:pop %rbp\n0x40113e:1:retq\n0x40113f:1:nop\n0x401140:1:retq\n0x401141:11:data16 nopw %cs:0x0(%rax,%rax,1)\n0x40114c:4:nopl 0x0(%rax)\n0x401150:4:endbr64\n0x401154:2:jmp 00000000004010e0 <register_tm_clones>\n0x401156:10:nopw %cs:0x0(%rax,%rax,1)\n0x401160:1:push %rbp\n0x401161:3:mov %rsp,%rbp\n0x401164:7:movl $0x0,-0x4(%rbp)\n0x40116b:3:mov -0x4(%rbp),%eax\n0x40116e:3:add $0x1,%eax\n0x401171:3:mov %eax,-0x4(%rbp)\n0x401174:5:mov $0x19,%ecx\n0x401179:1:cltd\n0x40117a:2:idiv %ecx\n0x40117c:3:movslq %edx,%rax\n0x40117f:7:mov 0x402010(,%rax,4),%eax\n0x401186:1:pop %rbp\n0x401187:1:retq\n0x401188:8:nopl 0x0(%rax,%rax,1)\n0x401190:1:push %rbp\n0x401191:3:mov %rsp,%rbp\n0x401194:7:movl $0x0,-0x4(%rbp)\n0x40119b:3:mov -0x4(%rbp),%edx\n0x40119e:2:mov %edx,%ecx\n0x4011a0:3:add $0x1,%ecx\n0x4011a3:3:mov %ecx,-0x4(%rbp)\n0x4011a6:2:mov %edx,%eax\n0x4011a8:3:movslq %ecx,%rcx\n0x4011ab:7:imul $0x51eb851f,%rcx,%rdx\n0x4011b2:3:mov %rdx,%rcx\n0x4011b5:4:shr $0x3f,%rcx\n0x4011b9:4:sar $0x23,%rdx\n0x4011bd:2:add %ecx,%edx\n0x4011bf:2:mov %edx,%ecx\n0x4011c1:3:lea (%rcx,%rcx,4),%edx\n0x4011c4:2:mov %edx,%ecx\n0x4011c6:3:lea (%rcx,%rcx,4),%edx\n0x4011c9:2:neg %edx\n0x4011cb:2:mov %edx,%ecx\n0x4011cd:4:lea 0x1(%rax,%rcx,1),%eax\n0x4011d1:2:cltq\n0x4011d3:7:mov 0x402010(,%rax,4),%eax\n0x4011da:5:cvtsi2ss %rax,%xmm0\n0x4011df:8:movss 0xe1d(%rip),%xmm1\n0x4011e7:4:divss %xmm1,%xmm0\n0x4011eb:1:pop %rbp\n0x4011ec:1:retq\n0x4011ed:3:nopl (%rax)\n0x4011f0:1:push %rbp\n0x4011f1:3:mov %rsp,%rbp\n0x4011f4:10:movabs $0x402074,%rdi\n0x4011fe:10:movabs $0x402077,%rsi\n0x401208:2:mov $0x0,%al\n0x40120a:5:callq 0000000000401040 <printf@plt>\n0x40120f:1:pop %rbp\n0x401210:1:retq\n0x401211:10:nopw %cs:0x0(%rax,%rax,1)\n0x40121b:5:nopl 0x0(%rax,%rax,1)\n0x401220:1:push %rbp\n0x401221:3:mov %rsp,%rbp\n0x401224:4:mov %rdi,-0x8(%rbp)\n0x401228:3:mov %esi,-0xc(%rbp)\n0x40122b:3:mov %edx,-0x10(%rbp)\n0x40122e:4:imul $0x6,-0xc(%rbp),%eax\n0x401232:5:mov $0x8,%ecx\n0x401237:1:cltd\n0x401238:2:idiv %ecx\n0x40123a:3:mov %eax,-0x14(%rbp)\n0x40123d:4:imul $0x6,-0xc(%rbp),%eax\n0x401241:5:mov $0x8,%ecx\n0x401246:1:cltd\n0x401247:2:idiv %ecx\n0x401249:5:mov $0xa,%eax\n0x40124e:2:sub %edx,%eax\n0x401250:3:mov %eax,-0x18(%rbp)\n0x401253:3:mov -0x10(%rbp),%eax\n0x401256:3:and $0x3f,%eax\n0x401259:3:mov -0x18(%rbp),%ecx\n0x40125c:2:shl %cl,%eax\n0x40125e:3:mov %eax,-0x1c(%rbp)\n0x401261:3:mov -0x18(%rbp),%ecx\n0x401264:5:mov $0x3f,%eax\n0x401269:2:shl %cl,%eax\n0x40126b:3:xor $0xffffffff,%eax\n0x40126e:3:mov %eax,-0x20(%rbp)\n0x401271:3:mov -0x20(%rbp),%edx\n0x401274:3:sar $0x8,%edx\n0x401277:4:mov -0x8(%rbp),%rax\n0x40127b:4:movslq -0x14(%rbp),%rcx\n0x40127f:3:and (%rax,%rcx,4),%edx\n0x401282:3:mov %edx,(%rax,%rcx,4)\n0x401285:3:mov -0x20(%rbp),%edx\n0x401288:6:and $0xff,%edx\n0x40128e:4:mov -0x8(%rbp),%rax\n0x401292:3:mov -0x14(%rbp),%ecx\n0x401295:3:add $0x1,%ecx\n0x401298:3:movslq %ecx,%rcx\n0x40129b:3:and (%rax,%rcx,4),%edx\n0x40129e:3:mov %edx,(%rax,%rcx,4)\n0x4012a1:3:mov -0x1c(%rbp),%edx\n0x4012a4:3:sar $0x8,%edx\n0x4012a7:4:mov -0x8(%rbp),%rax\n0x4012ab:4:movslq -0x14(%rbp),%rcx\n0x4012af:3:or (%rax,%rcx,4),%edx\n0x4012b2:3:mov %edx,(%rax,%rcx,4)\n0x4012b5:3:mov -0x1c(%rbp),%edx\n0x4012b8:6:and $0xff,%edx\n0x4012be:4:mov -0x8(%rbp),%rax\n0x4012c2:3:mov -0x14(%rbp),%ecx\n0x4012c5:3:add $0x1,%ecx\n0x4012c8:3:movslq %ecx,%rcx\n0x4012cb:3:or (%rax,%rcx,4),%edx\n0x4012ce:3:mov %edx,(%rax,%rcx,4)\n0x4012d1:1:pop %rbp\n0x4012d2:1:retq\n0x4012d3:10:nopw %cs:0x0(%rax,%rax,1)\n0x4012dd:3:nopl (%rax)\n0x4012e0:1:push %rbp\n0x4012e1:3:mov %rsp,%rbp\n0x4012e4:4:sub $0x30,%rsp\n0x4012e8:7:movl $0x0,-0x4(%rbp)\n0x4012ef:3:mov %edi,-0x8(%rbp)\n0x4012f2:4:mov %rsi,-0x10(%rbp)\n0x4012f6:4:cmpl $0x2,-0x8(%rbp)\n0x4012fa:6:je 0000000000401311 <main+0x31>\n0x401300:5:callq 00000000004011f0 <usage>\n0x401305:7:movl $0x1,-0x4(%rbp)\n0x40130c:5:jmpq 00000000004013d0 <main+0xf0>\n0x401311:4:mov -0x10(%rbp),%rax\n0x401315:4:mov 0x8(%rax),%rdi\n0x401319:5:callq 0000000000401060 <atoi@plt>\n0x40131e:3:mov %eax,-0x14(%rbp)\n0x401321:3:mov -0x14(%rbp),%eax\n0x401324:2:test %eax,%eax\n0x401326:6:jne 00000000004013c4 <main+0xe4>\n0x40132c:5:jmpq 0000000000401331 <main+0x51>\n0x401331:7:movl $0xff,-0x18(%rbp)\n0x401338:7:movl $0xff,-0x1c(%rbp)\n0x40133f:7:movl $0xfe01,-0x20(%rbp)\n0x401346:4:movslq -0x20(%rbp),%rdi\n0x40134a:4:shl $0x2,%rdi\n0x40134e:5:callq 0000000000401050 <malloc@plt>\n0x401353:4:mov %rax,-0x28(%rbp)\n0x401357:7:movl $0x0,-0x2c(%rbp)\n0x40135e:3:mov -0x2c(%rbp),%eax\n0x401361:3:cmp -0x20(%rbp),%eax\n0x401364:6:jge 00000000004013a7 <main+0xc7>\n0x40136a:5:callq 0000000000401160 <next_i>\n0x40136f:5:mov $0x2,%ecx\n0x401374:1:cltd\n0x401375:2:idiv %ecx\n0x401377:6:imul $0xfffffffe,%edx,%eax\n0x40137d:3:add $0x1,%eax\n0x401380:3:mov %eax,-0x30(%rbp)\n0x401383:5:callq 0000000000401160 <next_i>\n0x401388:3:mov -0x30(%rbp),%edx\n0x40138b:3:imul %eax,%edx\n0x40138e:4:mov -0x28(%rbp),%rax\n0x401392:4:movslq -0x2c(%rbp),%rcx\n0x401396:3:mov %edx,(%rax,%rcx,4)\n0x401399:3:mov -0x2c(%rbp),%eax\n0x40139c:3:add $0x1,%eax\n0x40139f:3:mov %eax,-0x2c(%rbp)\n0x4013a2:5:jmpq 000000000040135e <main+0x7e>\n0x4013a7:4:mov -0x28(%rbp),%rdi\n0x4013ab:3:mov -0x18(%rbp),%esi\n0x4013ae:3:mov -0x1c(%rbp),%edx\n0x4013b1:5:callq 0000000000401220 <pack6bit>\n0x4013b6:4:mov -0x28(%rbp),%rdi\n0x4013ba:5:callq 0000000000401030 <free@plt>\n0x4013bf:5:jmpq 00000000004013c9 <main+0xe9>\n0x4013c4:5:callq 00000000004011f0 <usage>\n0x4013c9:7:movl $0x0,-0x4(%rbp)\n0x4013d0:3:mov -0x4(%rbp),%eax\n0x4013d3:4:add $0x30,%rsp\n0x4013d7:1:pop %rbp\n0x4013d8:1:retq\n0x4013d9:7:nopl 0x0(%rax)\n0x4013e0:4:endbr64\n0x4013e4:2:push %r15\n0x4013e6:7:lea 0x2a23(%rip),%r15\n0x4013ed:2:push %r14\n0x4013ef:3:mov %rdx,%r14\n0x4013f2:2:push %r13\n0x4013f4:3:mov %rsi,%r13\n0x4013f7:2:push %r12\n0x4013f9:3:mov %edi,%r12d\n0x4013fc:1:push %rbp\n0x4013fd:7:lea 0x2a14(%rip),%rbp\n0x401404:1:push %rbx\n0x401405:3:sub %r15,%rbp\n0x401408:4:sub $0x8,%rsp\n0x40140c:5:callq 0000000000401000 <_init>\n0x401411:4:sar $0x3,%rbp\n0x401415:2:je 0000000000401436 <__libc_csu_init+0x56>\n0x401417:2:xor %ebx,%ebx\n0x401419:7:nopl 0x0(%rax)\n0x401420:3:mov %r14,%rdx\n0x401423:3:mov %r13,%rsi\n0x401426:3:mov %r12d,%edi\n0x401429:4:callq *(%r15,%rbx,8)\n0x40142d:4:add $0x1,%rbx\n0x401431:3:cmp %rbx,%rbp\n0x401434:2:jne 0000000000401420 <__libc_csu_init+0x40>\n0x401436:4:add $0x8,%rsp\n0x40143a:1:pop %rbx\n0x40143b:1:pop %rbp\n0x40143c:2:pop %r12\n0x40143e:2:pop %r13\n0x401440:2:pop %r14\n0x401442:2:pop %r15\n0x401444:1:retq\n0x401445:11:data16 nopw %cs:0x0(%rax,%rax,1)\n0x401450:4:endbr64\n0x401454:1:retq\n0x401458:4:endbr64\n0x40145c:4:sub $0x8,%rsp\n0x401460:4:add $0x8,%rsp\n0x401464:1:retq\n'
2022-09-04T17:34:18.505690-03:00[140631061484160]MainThread: err="==1771002== Memcheck, a memory error detector\n==1771002== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==1771002== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info\n==1771002== Command: /home/cissakind/Desktop/ex/extr_anypixelfirmwarecontrollersrcLEDproto.c_pack6bit.d/extr_anypixelfirmwarecontrollersrcLEDproto.c_pack6bit_O0 0\n==1771002== \n==1771002== \n==1771002== HEAP SUMMARY:\n==1771002==     in use at exit: 0 bytes in 0 blocks\n==1771002==   total heap usage: 1 allocs, 1 frees, 260,100 bytes allocated\n==1771002== \n==1771002== All heap blocks were freed -- no leaks are possible\n==1771002== \n==1771002== For lists of detected and suppressed errors, rerun with: -s\n==1771002== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n"
2022-09-04T17:34:19.433973-03:00[140631061484160]MainThread: err="==1771012== cfggrind, a dynamic control flow graph (CFG) reconstruction tool\n==1771012== Copyright (C) 2019, and GNU GPL'd, by Andrei Rimsa with code from callgrind\n==1771012== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info\n==1771012== Command: /home/cissakind/Desktop/ex/extr_anypixelfirmwarecontrollersrcLEDproto.c_pack6bit.d/extr_anypixelfirmwarecontrollersrcLEDproto.c_pack6bit_O0 0\n==1771012== \n==1771012== \n"
2022-09-04T17:34:20.398549-03:00[140631061484160]MainThread: out="[\n  {\n    cfg: 0x401220,\n    invoked: 1,\n    complete: true,\n    blocks: 1,\n    phantoms: 0,\n    exit: true,\n    halt: false,\n    edges: 2,\n    static: {\n      instructions: 57,\n      calls: 0,\n      signals: 0\n    },\n    dynamic: {\n      instructions: 57,\n      calls: 0,\n      signals: 0\n    },\n    name: '/home/cissakind/Desktop/ex/extr_anypixelfirmwarecontrollersrcLEDproto.c_pack6bit.d/extr_anypixelfirmwarecontrollersrcLEDproto.c_pack6bit_O0::pack6bit(59)'\n  }\n]\n"
